공부할 내용 ;

1.자바스크립트란 

스크립트 언어 (특정한 프로그램 안에서 동작하는 프로그램이기 때문에 웹 브라우저 프로그램 안에서만 동작을 한다.)/
 웹 브라우저에 인터프리터가 내장되어 있다.

 HTML, CSS와 함께 웹을 구성하는 요소 중 하나다. HTML이 웹 페이지의 기본 구조를 담당하고, CSS가 디자인을 담당한다면 JavaScript는 클라이언트 단에서 웹 페이지가 동작하는 것을 담당한다

2.프로그래밍 언어 패러다임

프로그래밍 패러다임은 프로그래머에게 프로그래밍의 관점을 갖게 해 주고, 결정하는 역할

프로그램은 순차, 분기, 반복, 참조로 구성되어지며 프로그램 개발을 위하여 전략을 수립해야 한다.

위에서 말한 전략은 어떤 언어를 사용할지, 프로그래밍에서 어떤 것을 지양하고, 지양할지 등등 다양한 방법을 수립하게 된다. 여기서 말한 전략에 해당하는 내용들이 프로그래밍 패러다임이다.

대표적인 프로그래밍 패러다임에는 절차적, 객체지향, 함수형 프로그래밍이 존재한다.

-명령형 프로그래밍

문제를 어떻게 해결해야 하는지 컴퓨터에게 명령을 내리는 방법의 프로그래밍이다.

1) 절차(순차)적 프로그래밍
단어 그대로 절차(순차)적인 명령 수행뿐만 아니라, 프로시저 호출의 개념을 바탕으로 하고 있는
프로그램 패러다임입니다.

C언어가 대표적인 절차적 프로그래밍 언어라고 불리고 있습니다.

2) 객체지향 프로그래밍
최소 단위가 객체이며, 객체를 만들고, 이 객체를 사용하여 데이터와 메소드를 묶고 소통하는 프로그래밍 방식이다.

Java(자바)가 대표적인 객체지향 프로그래밍 언어라고 불리고 있습니다.

직관적이며, 유지보수가 쉽습니다.

-선언형 프로그래밍

무엇을 어떻게 해결해야 하는지 집중하고 해결 방법은 컴퓨터에게 위임하는 방법

대표적으로 함수형 프로그래밍이 있다.

1) 함수형 프로그래밍
최소 단위가 함수이며, 함수를 통하여 새로운 데이터들을 만들어가며 파이프 형태로 프로그래밍하는 방식이며 선언형 프로그래밍 방식과 비슷하다.

모든 데이터의 처리를 수학적 함수(function)의 계산으로 취급하여 결과 값을 받아보고자 하는 패러다임입니다.

함수 단위로 나눠지므로 재사용성이 높다.

Immutability을 지향하기에 동작을 예측하기 쉽고 Side Effects를 방지한다.

Side Effects를 방지하므로 동시성 문제도 해결된다.

* Immutability(불변성) 

immutable 객체(변할 수 없는 객체)는 생성된 이후에는 바꿀 수 없는 객체이다.

불변성은 함수형 프로그래밍의 핵심 개념이다. 불변성이 없다면 프로그램의 데이터 흐름이 손실된다.

Side Effects(부작용)

함수형 프로그래밍에서 부작용은 함수 반환 값을 제외하고 함수 호출 외부에서 볼 수 있는 상태 변경을 뜻한다.

함수형 프로그래밍 규칙에 따르면 함수는 함수 외부의 상태를 수정할 수 없게 다룬다.

-멀티 패러다임

JavaScript는 결국 멀티 패러다임이 가능하다.
각 패러다임의 장점을 활용하여 같이 쓰도록 하자.

3.NodeJS

(https://hanamon.kr/nodejs-%EA%B0%9C%EB%85%90-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0/)

브라우저 안에서만 작동하던 JavaScript를 브라우저 외의 환경에서 작동할 수 있게 만들어 준 런타임 환경이다.

-Node.js는 JavaScript를 서버에서도 사용할 수 있도록 만든 프로그램이다.

-Node.js는 V8이라는 JavaScript 엔진 위에서 동작하는 자바스크립트 런타임(환경)이다.

-Node.js는 서버사이트 스크립트 언어가 아니다. 프로그램(환경)이다.

-Node.js는 웹서버와 같이 확장성 있는 네트워크 프로그램을 제작하기 위해 만들어졌다.

4.자바스크립트 실행방법

HTML 구조 내에서
<script>
    <!-- 본문 -->
</script>

5.자바스크립트 문법

1) 변수

자바스크립트에는 변수형(int, double, string)이 존재하지 않는다. var 이라는 가변형 변수만 존재하여 초기화 할때 형태에 따라서 알아서 할당된다.

ex) var x = 123;

2) 연산자

+, -, *, /, % 등의 기본 연산은 물론 ++, --와 같은 증감 연산자도 사용할 수 있다.

ex) var s = "String1" + "String2";
    console.log(s);
    StringString2

3) 조건문

if (a > b) {
    console.log("a is more than b.")
} else if (a == b) {
    console.log("a is the same as b.")
} else {
    console.log("a is less than b.")
}

4) 함수

function notify(message) {
    console.log('# NOTIFICAION : ' + message);
}

notify('say something');

# NOTIFITAION : say something


값을 반환하는 함수는 아래와 같이 작성한다.


function add(value1, value2) {

    return value1 + value2;

}


var a = 10;

var b = 20;

console.log(add(a, b));

30

5) 배열

변수의 값이 연속적으로 나열된 형식

var careers = [
    "Warrior",
    "Archer",
    "Wizard"
];

-인덱스

-배열과 관련된 메소드
(join, reverse, sort, concat, push, pop, shift, unshift)

6) 오브젝트

구조체(struct) 처럼 내부에 여러 변수를 가질 수 있고 클래스(class)처럼 내부에 메소드를 포함하고 있는 형식이다. JSON이라고 많이 알려진 형식이다.

7) 반복문

for (var i=0; i<5; i++) {
    console.log(i);
}

var i = 0;
while (i < 5) {
    console.log(i);
    i++;
}

8) 문자열

var welcome = "ONDE Planet is the most peaceful space in the universe";

console.log(welcome.charAt(0));
// charAt(n) : n번째 문자를 출력한다. 결과는 O

console.log(welcome.charCodeAt(0));
// charCodeAt(n) : n번째 문자의 유니코드를 출력한다. 결과는 79

console.log(welcome.indexOf("x"));
// indexOf("?") : ?라는 글자가 있다면 글자의 인덱스를, 없다면 false(-1)을 출력한다. 결과는 -1

console.log(welcome.includes("space"));
// includes("?") : ?라는 글자가 있다면 true(0), 없다면 false(-1)을 출력한다. 결과는 0

console.log(welcome.replace("peaceful", "nasty"));
// replace("a", "b") : a를 b로 교체한다. 결과는 ONDE Planet is the most nasty space in the universe.

console.log(welcome.search("universe"));
// search("?") : ?라는 글자를 검색하여 첫 문자의 시작 지점을 알려준다. 결과는 46

console.log(welcome.slice(0,4));
// slice(n, n') : n~n'-1 까지의 문자를 가져온다. 결과는 ONDE

console.log(welcome.split(" "));
// split("?") : ?라는 문자를 기준으로 문자열을 분리한다. 결과는 ONDE,Planet,is,the,most,peaceful...

console.log(welcome.trim());
// trim() : 앞, 뒤의 공백을 제거하는 역할을 한다. 이 값에서는 앞뒤에 공백이 없으므로 결과가 본래의 문자열과 동일하다.

console.log(welcome.length);
// length : 문자열의 길이를 반환한다. 결과는 55

9) 수학연산

Math.abs(-3);
// Math.abs(n) : n을 절댓값으로 바꾼다.

Math.ceil(3.1);
// Math.ceil(n) : n값을 올림한다.

Math.floor(3.9);
// Math.floor(n) : n값을 내림한다.

Math.round(3.5);
// Math.round(n) : n값을 반올림한다.

var a = Math.random();
// Math.random() : 난수를 생성한다.

var b = Math.random()*10+10;
// Math.random()*x+y : y~x+y 범위에서 난수가 생성된다.

var c = Math.floor(Math.random() * (max - min)) + min;
// min 부터 max - 1 까지 범위의 난수

10) 형변환

// Number -> String
var num = 2018;
var str = String(num); // "2018"
var str = num.toString(); // "2018"

// String -> Num
var str = "2018.08";
var mInt = Number(str); // 2018
var mInt = parseInt(str); // 2018
var mFloat = parseFloat(str); // 2018.08

// Object -> String
var user = {
    name: '배진오',
    age: 24,
};
console.log(user); // { name: '배진오', age: 24 }

var strUser = JSON.stringify(user); // 문자열 JSON
console.log(strUser); // "{\"name\":\"배진오\",\"age\":24}"

var strUserToObject = JSON.parse(strUser);
// JSON 형식의 문자열이면 parse를 이용해서 Object로 변환할 수 있음

11) 전개구문

12) 함수형 메서드



6.var, let, const의 차이점

 var의 유효 범위는 함수 내부로 조건문이나 반복문 안에서 초기화 된 경우라도 함수 내부 블록이라면 어디서나 호출할 수 있다. 최신 자바스크립트에선 let이라는 가변형 블럭 지역 변수와 const라는 불변형 블럭 지역 변수가 추가되었다.

7.자바스크립트의 타입

자바스크립트에서는 크게 기본 타입(Primitive Type)과 참조 타입(Reference Type)으로 나뉘는데, 각 타입에 존재하는 데이터 타입은 다음과 같습니다.

기본 타입 (Primitive Type)

숫자 (Number)
문자열 (String)
불린값 (Boolean)
undefined
null
Symbol (ES6에서 추가된 새로운 데이터 타입)
참조 타입 (Reference Type)

객체 (Object)

8.자바스크립트 비교연산자

비교 연산자(comparison operator)
비교 연산자는 피연산자 사이의 상대적인 크기를 판단하여, 참(true)과 거짓(false)을 반환합니다.

비교 연산자는 모두 두 개의 피연산자를 가지는 이항 연산자이며, 피연산자들의 결합 방향은 왼쪽에서 오른쪽입니다.

비교 연산자	설명
==	왼쪽 피연산자와 오른쪽 피연산자의 값이 같으면 참을 반환함.
===	왼쪽 피연산자와 오른쪽 피연산자의 값이 같고, 같은 타입이면 참을 반환함.
!=	왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않으면 참을 반환함.
!==	왼쪽 피연산자와 오른쪽 피연산자의 값이 같지 않거나, 타입이 다르면 참을 반환함.
>	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크면 참을 반환함.
>=	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 크거나 같으면 참을 반환함.
<	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작으면 참을 반환함.
<=	왼쪽 피연산자의 값이 오른쪽 피연산자의 값보다 작거나 같으면 참을 반환함.

논리 연산자

9.자바스크립트 함수

function 함수이름(매개변수1, 매개변수2,...) {

    함수가 호출되었을 때 실행하고자 하는 실행문;

}

10.템플릿 리터럴

파이썬의 {}.format과 유사
템플릿 리터럴은 내장된 표현식을 허용하는 문자열 리터럴입니다.
템플릿 리터럴은 표현식/문자열 삽입, 여러 줄 문자열, 문자열 형식화, 문자열 태깅 등 다양한 기능을 제공
템플릿 리터럴은 런타임 시점에 일반 자바스크립트 문자열로 처리/변환됩니다.

더 공부해보기

* 1. 함수의 동적 매개변수 받기

 함수의 매개변수가 함수 호출시 각각 다를 수 있을 때 arguments 를 활용하여 

   배열로 매개변수의 값을 받아 올 수 있음

 var func = function(){

     for(var i = 0; i < arguments.length; i++){

         console.log( arguments[i] );

     }

}

* 2. 자바스크립트 문법 추가

주석처리

// (한줄만)
/* (여러줄) */
